######################################################################
#               mIDEX Variables for T0 and T1                        #
######################################################################
[gcode_macro _mIDEX_VARS]
variable_var1: 500  ;slow push-push latch acceleration
variable_var2: 2000 ;normal acceleration
variable_var3: 7000 ;white rabit acceleration
#variable_var4: 0 ; X offset
#variable_var5: 0 ; Y Offset
variable_var4: -21.72 ; X offset
variable_var5: -0.36 ; Y Offset
variable_var6: -53.32  ; T0_Park_Position
variable_var7: 248.7  ; T1_Park_Position
variable_var8: 3000 ;  100mm/s * 60 = 6,000mm/min    ParkVelocity
variable_var9: 18000 ; 500mm/s * 60 = 30,000mm/min    Toolhead park velocity
variable_var10: 20000 ; 700mm/s * 60 = 42,000mm/min    White rabit park velocity
gcode:

######################################################################
#               Activate the primary T0 extruder                     #
######################################################################

[gcode_macro T0]
gcode:

    {% set mIDEX_vars = printer["gcode_macro _mIDEX_VARS"] %}
   
    {% if printer.toolhead.extruder != "extruder" %}
    SET_GCODE_OFFSET X=0 Y=0
    
   ; SAVE_GCODE_STATE NAME=GS_PARK
         

   ; G91
   ;   G1 Z+1 F1500
   ; G90
    
    ; Move T1 to Right Park position
    SET_VELOCITY_LIMIT ACCEL={mIDEX_vars.var2} ACCEL_TO_DECEL={mIDEX_vars.var2 / 2}
    G0 X{mIDEX_vars.var7 - 11} F{mIDEX_vars.var9}
    SET_VELOCITY_LIMIT ACCEL={mIDEX_vars.var1} ACCEL_TO_DECEL={mIDEX_vars.var1 / 2}
    G0 X{mIDEX_vars.var7} F{mIDEX_vars.var8}
    G0 X{mIDEX_vars.var7 - 11} F{mIDEX_vars.var8}

    ; Move white rabbit to left park position to pickup T0
    SET_VELOCITY_LIMIT ACCEL={mIDEX_vars.var3} ACCEL_TO_DECEL={mIDEX_vars.var3 / 2} 
    G0 X{mIDEX_vars.var6 + 11} F{mIDEX_vars.var10}
    SET_VELOCITY_LIMIT ACCEL={mIDEX_vars.var1} ACCEL_TO_DECEL={mIDEX_vars.var1 / 2}
    G0 X{mIDEX_vars.var6} F{mIDEX_vars.var8}
    G0 X{mIDEX_vars.var6 + 11} F{mIDEX_vars.var8}
  ;  M400
  ;  SET_STEPPER_ENABLE STEPPER=extruder1 ENABLE=0
 ;   G4 P2500
 ;   GPHOTO_SNAPSHOT_TEST
 ;   G4 P500    #Milliseconds to dwell
  
    ; Move X to center of bed
  ; G0 X113 F{ParkVelocity}  
;  SET_STEPPER_ENABLE STEPPER=extruder ENABLE=1
  
  SET_VELOCITY_LIMIT ACCEL={mIDEX_vars.var2} ACCEL_TO_DECEL={mIDEX_vars.var2 / 2} VELOCITY={mIDEX_vars.var9 / 60}
  ;RESTORE_GCODE_STATE NAME=GS_PARK MOVE=1 MOVE_SPEED=30000
  SET_GCODE_OFFSET X=0 Y=0
  ACTIVATE_EXTRUDER EXTRUDER=extruder
  {% endif %}
    

######################################################################
#              Activate the secondary T1 extruder                    #
######################################################################

[gcode_macro T1]
gcode:
     {% set mIDEX_vars = printer["gcode_macro _mIDEX_VARS"] %}

  {% if printer.toolhead.extruder != "extruder1" %}
    
   SET_GCODE_OFFSET X=0 Y=0
    
     
    ; Move T0 to Left Park Position
    SET_VELOCITY_LIMIT ACCEL={mIDEX_vars.var2} ACCEL_TO_DECEL={mIDEX_vars.var2 / 2}
    G0 X{mIDEX_vars.var6 + 11} F{mIDEX_vars.var9}
    SET_VELOCITY_LIMIT ACCEL={mIDEX_vars.var1} ACCEL_TO_DECEL={mIDEX_vars.var1 / 2}
    G0 X{mIDEX_vars.var6} F{mIDEX_vars.var8}
    G0 X{mIDEX_vars.var6 + 11} F{mIDEX_vars.var8} 
 ;   M400
 ;   SET_STEPPER_ENABLE STEPPER=extruder ENABLE=0
    
;    G4 P2500
;    GPHOTO_SNAPSHOT_TEST
;    G4 P500      #Milliseconds to dwell

    ; Move white rabbit to Right park position to pickup T1
    SET_VELOCITY_LIMIT ACCEL={mIDEX_vars.var3} ACCEL_TO_DECEL={mIDEX_vars.var3 / 2}
    G0 X{mIDEX_vars.var7 - 11} F{mIDEX_vars.var10}
    SET_VELOCITY_LIMIT ACCEL={mIDEX_vars.var1} ACCEL_TO_DECEL={mIDEX_vars.var1 / 2}
    G0 X{mIDEX_vars.var7} F{mIDEX_vars.var8}
    G0 X{mIDEX_vars.var7 - 11} F{mIDEX_vars.var8}

    ; Move left 15mm to drop tool T0
    ;G0 X{152-25} Y75 F{ParkVelocity}
    ; Move to Center left of bed to pickup T1 (left) x+18.63
    ; G0 X-150.5 F{ParkVelocity}
###############################################################################Take Snapshot###############################################
#    G4 P{delayMS} ; Dwell for delayMS seconds
#    RUN_SHELL_COMMAND CMD=gphoto2_trigger_snapshot
###########################################################################################################################################

  ;  SET_DUAL_CARRIAGE CARRIAGE=1 
     
  ;   SET_GCODE_OFFSET X=0 Y=0
  ;  SET_STEPPER_ENABLE STEPPER=extruder1 ENABLE=1

    ; Move X to center of bed
   ; G0 X113 F{ParkVelocity}

  SET_VELOCITY_LIMIT ACCEL={mIDEX_vars.var2} ACCEL_TO_DECEL={mIDEX_vars.var2 / 2} VELOCITY={mIDEX_vars.var9 / 60}

  ;RESTORE_GCODE_STATE NAME=GS_PARK MOVE=1 MOVE_SPEED=30000


  SET_GCODE_OFFSET X={mIDEX_vars.var4} Y={mIDEX_vars.var5}
  ACTIVATE_EXTRUDER EXTRUDER=extruder1
  
  ;G91
  ;  G0 X-22.2 Y-0.471 F{ParkVelocity}
  ;G90

  {% endif %}






# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10

[gcode_macro Clean_TEST_SPEED]
gcode:
    # Speed
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(5)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
    {% set bound = params.BOUND|default(20)|int %}
    # Size for small pattern box
    {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
    
    # Large pattern
        # Max positions, inset by BOUND
        {% set x_min = printer.toolhead.axis_minimum.x + bound %}
        {% set x_max = printer.toolhead.axis_maximum.x - bound %}
        {% set y_min = printer.toolhead.axis_minimum.y + bound %}
        {% set y_max = printer.toolhead.axis_maximum.y - bound %}
    
    # Small pattern at center
        # Find X/Y center point
        {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
        {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
        
        # Set small pattern box around center point
        {% set x_center_min = x_center - (smallpatternsize/2) %}
        {% set x_center_max = x_center + (smallpatternsize/2) %}
        {% set y_center_min = y_center - (smallpatternsize/2) %}
        {% set y_center_max = y_center + (smallpatternsize/2) %}

    # Save current gcode state (absolute/relative, etc)
    SAVE_GCODE_STATE NAME=TEST_SPEED
    
    # Output parameters to g-code terminal
    { action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
    
    # Home and get position for comparison later:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28
        # QGL if not already QGLd (only if QGL section exists in config)
        {% if printer.configfile.settings.quad_gantry_level %}
            {% if printer.quad_gantry_level.applied == False %}
                QUAD_GANTRY_LEVEL
                G28 Z
            {% endif %}
        {% endif %} 
        # Move 50mm away from max position and home again (to help with hall effect endstop accuracy - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/24)
        G90
        G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 X Y
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Go to starting position
    G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

    # Set new limits
    SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} # ACCEL_TO_DECEL={accel / 2}

    {% for i in range(iterations) %}
        # Large pattern diagonals
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        
        # Large pattern box
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
    
        # Small pattern diagonals
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        
        # Small patternbox
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
    {% endfor %}

    # Restore max speed/accel/accel_to_decel to their configured values
    SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} #ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 

    # Re-home and get position again for comparison:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 # This is a full G28 to fix an issue with CoreXZ - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/12
        # Go to XY home positions (in case your homing override leaves it elsewhere)
        G90
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=TEST_SPEED


    




######################################################################
#           TEST_SPEED
######################################################################

# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10

[gcode_macro TEST_SPEED]
gcode:
	# Speed
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	# Iterations
	{% set iterations = params.ITERATIONS|default(5)|int %}
	# Acceleration
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	# Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
	{% set bound = params.BOUND|default(50)|int %}
	# Size for small pattern box
	{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
	
	# Large pattern
		# Max positions, inset by BOUND
		{% set x_min =  100 %} #printer.toolhead.axis_minimum.x + ( bound * 2 ) %}
		{% set x_max = 200 %} #printer.toolhead.axis_maximum.x - ( bound * 2 ) %}
		{% set y_min = 20 %} #printer.toolhead.axis_minimum.y + bound %}
		{% set y_max = 100 %} #printer.toolhead.axis_maximum.y - bound %}
	
	# Small pattern at center
		# Find X/Y center point
		{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
		{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
		
		# Set small pattern box around center point
		{% set x_center_min = x_center - (smallpatternsize/2) %}
		{% set x_center_max = x_center + (smallpatternsize/2) %}
		{% set y_center_min = y_center - (smallpatternsize/2) %}
		{% set y_center_max = y_center + (smallpatternsize/2) %}

	# Save current gcode state (absolute/relative, etc)
	SAVE_GCODE_STATE NAME=TEST_SPEED
	
	# Output parameters to g-code terminal
	{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
	
	# Home and get position for comparison later:
		G28
		# QGL if not already QGLd (only if QGL section exists in config)
		#{% if printer.configfile.settings.quad_gantry_level %}
	#		{% if printer.quad_gantry_level.applied == False %}
#				QUAD_GANTRY_LEVEL
#				G28 Z
#			{% endif %}
#		{% endif %}	
#		# Move 50mm away from max position and home again (to help with hall effect endstop accuracy - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/24)
#		G90
#		G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
#		G28 X Y
#		G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
#		G4 P1000 
#		GET_POSITION

	# Go to starting position
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

	# Set new limits
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

	{% for i in range(iterations) %}

      {% if i % 2 == 0 %}
        T0
      {% else %}
        T1
      {% endif %}

            # Large pattern
			# Diagonals
			G0 X{x_min} Y{y_min} F{speed*60}
			G0 X{x_max} Y{y_max} F{speed*60}
			G0 X{x_min} Y{y_min} F{speed*60}
			G0 X{x_max} Y{y_min} F{speed*60}
			G0 X{x_min} Y{y_max} F{speed*60}
			G0 X{x_max} Y{y_min} F{speed*60}
			
			# Box
			G0 X{x_min} Y{y_min} F{speed*60}
			G0 X{x_min} Y{y_max} F{speed*60}
			G0 X{x_max} Y{y_max} F{speed*60}
			G0 X{x_max} Y{y_min} F{speed*60}
		
		# Small pattern
			# Small diagonals 
			G0 X{x_center_min} Y{y_center_min} F{speed*60}
			G0 X{x_center_max} Y{y_center_max} F{speed*60}
			G0 X{x_center_min} Y{y_center_min} F{speed*60}
			G0 X{x_center_max} Y{y_center_min} F{speed*60}
			G0 X{x_center_min} Y{y_center_max} F{speed*60}
			G0 X{x_center_max} Y{y_center_min} F{speed*60}
			
			# Small box
			G0 X{x_center_min} Y{y_center_min} F{speed*60}
			G0 X{x_center_min} Y{y_center_max} F{speed*60}
			G0 X{x_center_max} Y{y_center_max} F{speed*60}
			G0 X{x_center_max} Y{y_center_min} F{speed*60}



	{% endfor %}

      T0

	# Restore max speed/accel/accel_to_decel to their configured values
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 

	# Re-home and get position again for comparison:
		G28 X Y
		# Go to XY home positions (in case your homing override leaves it elsewhere)
		G90
		G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
		G4 P1000 
		GET_POSITION

	# Restore previous gcode state (absolute/relative, etc)
	RESTORE_GCODE_STATE NAME=TEST_SPEED



######################################################################
#                  Start Print and End Print                         #
######################################################################

# Replace the slicer's custom start and end g-code scripts with
# START_PRINT and END_PRINT.

[gcode_macro START_PRINT]
gcode:
 #   {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
 #   {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
 #   # Start bed heating
 #   M140 S{BED_TEMP}
 #   # Use absolute coordinates
   ; G90
    # Reset the G-Code Z offset (adjust Z offset if needed)
    ;SET_GCODE_OFFSET Z=0.0
    # Home the printer
   ; G28
    # Move the nozzle near the bed
  #  G1 Z5 F3000
    # Move the nozzle very close to the bed
 #   G1 Z0.15 F300
    # Wait for bed to reach temperature
   # M190 S{BED_TEMP}
   # # Set and wait for nozzle to reach temperature
   # M109 T1 S{EXTRUDER_TEMP}

[gcode_macro PRINT_DONE]
gcode:

    G91
    G1 Z+25 F1500
    G90
  
    TURN_OFF_HEATERS

    HOME_XY
    
    # Disable steppers
    M84



[gcode_macro Duplicate]
gcode:

  SYNC_EXTRUDER_MOTION EXTRUDER=extruder1 MOTION_QUEUE=extruder


[gcode_macro Test_Tool_Changer]
gcode:
	
	# Iterations
	{% set iterations = params.ITERATIONS|default(2)|int %}
    G28 Y
    G28 X

	{% for i in range(iterations) %}
  T0
  T1
	{% endfor %}
  T0

#=====================================================
# MANUAL SNAPSHOT TEST
#=====================================================
[gcode_macro GPHOTO_SNAPSHOT_TEST]
gcode:
    RUN_SHELL_COMMAND CMD=gphoto2_trigger_snapshot




#=====================================================
# CNC KITCHEN FLOW TEST
#=====================================================
[gcode_macro FLOW_TEST]
gcode:
    # Extrusion Speed
	{% set Extrusion_Speed = params.Extrusion_Speed|default(350)|int %}
	# Test Distance
	{% set Extrusion_Distance = params.Extrusion_Distance|default(500)|int %}
  M83     ;relative extrusions 
  G1 F{Extrusion_Speed} ;450mm/min speed 
  G1 E20  ;prime with 20mm 
  G1 F3   ;slow extrude for pause 
  G1 E0.1 ;0.1mm extrusion 
  G1 F{Extrusion_Speed} ;450mm/min speed 
  G1 E{Extrusion_Distance} ;500mm extrusion 



[gcode_macro LED_ON]
gcode:

  SET_LED LED="led_strip" RED=1 GREEN=1 BLUE=1 SYNC=0 TRANSMIT=1

[gcode_macro LED_OFF]
gcode:
  SET_LED LED="led_strip" RED=0 GREEN=0 BLUE=0 SYNC=0 TRANSMIT=1

#[gcode_macro LED_YELLOW]
#gcode:
#
#  SET_LED LED=led_strip RED=1 GREEN=1 BLUE=0
#
#[gcode_macro LED_PURPLE]
#gcode:
#
#  SET_LED LED=led_strip RED=1 GREEN=0 BLUE=1
#
[gcode_macro LED_RED]
gcode:

  SET_LED LED=led_strip RED=1 GREEN=0 BLUE=0 SYNC=0 TRANSMIT=1

[gcode_macro LED_GREEN]
gcode:

 SET_LED LED=led_strip RED=0 GREEN=1 BLUE=0 SYNC=0 TRANSMIT=1

[gcode_macro LED_BLUE]
gcode:

 SET_LED LED=led_strip RED=0 GREEN=0 BLUE=1 SYNC=0 TRANSMIT=1

######################################################################
#                               HOME                                 #
######################################################################

[gcode_macro HOME_XY]
gcode:

    {% if printer.toolhead.extruder != "extruder" %}
    T0
    {% endif %}
    G28 X
    G28 Y
    

[gcode_macro X1]
gcode:
   
  {% if printer.toolhead.extruder != "extruder1" %}
    SET_GCODE_OFFSET X=0 Y=0
    ACTIVATE_EXTRUDER EXTRUDER=extruder1

    {%set ParkVelocity = 777*60 | int %}
   
  ;  G91
  ;    G1 Z+1 F1500
  ;  G90
    
    ; Move T0 to Left Park Position
    G0 X-40 F{ParkVelocity}
    G0 X-54.5 F3000
    G0 X-40 F1000
    ; Move to Back right corner of bed to drop T0 -81--5.86
    
 ;   M400
 ;   SET_STEPPER_ENABLE STEPPER=extruder ENABLE=0
    
;    G4 P2500
;    GPHOTO_SNAPSHOT_TEST
;    G4 P500      #Milliseconds to dwell

    ; Move white rabbit to Right park position to pickup T1
    G0 X238 F{ParkVelocity*1}
    G0 X248.75 F3000
    G0 X230 F1000

    ; Move left 15mm to drop tool T0
    ;G0 X{152-25} Y75 F{ParkVelocity}
    ; Move to Center left of bed to pickup T1 (left) x+18.63
    ; G0 X-150.5 F{ParkVelocity}
###############################################################################Take Snapshot###############################################
#    G4 P{delayMS} ; Dwell for delayMS seconds
#    RUN_SHELL_COMMAND CMD=gphoto2_trigger_snapshot
###########################################################################################################################################

  ;  SET_DUAL_CARRIAGE CARRIAGE=1
   SET_GCODE_OFFSET X=-22.4 Y=-0.45
  ;   SET_GCODE_OFFSET X=0 Y=0
  ;  SET_STEPPER_ENABLE STEPPER=extruder1 ENABLE=1

    ; Move X to center of bed
   ; G0 X113 F{ParkVelocity}

  {% endif %}


######################################################################
#           T0 with Push-Push Latch Position test
######################################################################

# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10

[gcode_macro Tool_Position_Test]
gcode:
	# Speed
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	# Iterations
	{% set iterations = params.ITERATIONS|default(5)|int %}
	# Acceleration
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	# Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
	{% set bound = params.BOUND|default(20)|int %}
	# Size for small pattern box
	{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
	

	# Save current gcode state (absolute/relative, etc)
	SAVE_GCODE_STATE NAME=TEST_SPEED
	
	# Output parameters to g-code terminal
	{ action_respond_info("TEST_T1_Position: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
	
	# Home and get position for comparison later:
		G28
		# QGL if not already QGLd (only if QGL section exists in config)
		#{% if printer.configfile.settings.quad_gantry_level %}
	#		{% if printer.quad_gantry_level.applied == False %}
#				QUAD_GANTRY_LEVEL
#				G28 Z
#			{% endif %}
#		{% endif %}	
#		# Move 50mm away from max position and home again (to help with hall effect endstop accuracy - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/24)
#		G90
#		G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
#		G28 X Y
#		G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
#		G4 P1000 
#		GET_POSITION

	# Go to starting position
	G0 X{0} Y{0} Z{bound + 10} F{speed*60}

    T1
    
    

	# Set new limits
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

	{% for i in range(iterations) %}
	
     T0
     T1
	
	{% endfor %}
    

	# Restore max speed/accel/accel_to_decel to their configured values
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 

	T0

    # Re-home and get position again for comparison:
		G28 X Y
		# Go to XY home positions (in case your homing override leaves it elsewhere)
		G90
		G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
		G4 P1000 
		GET_POSITION

	# Restore previous gcode state (absolute/relative, etc)
	RESTORE_GCODE_STATE NAME=TEST_SPEED

[gcode_macro PRINT_START]
gcode:
  ;  M106 S255
    G28
    G0 Z25

[gcode_macro PRINT_END]
gcode:
    # Turn off bed, extruder, and fan
    M140 S0
    M104 S0
    M106 S0
    G28 X Y  
    # Disable steppers
    M84




[gcode_macro GET_POSITION_STATS]
gcode:
    {% set FIL_SWITCH = 'filament_switch_sensor filament_sensor' %}
    {% set FIL_MOTION = 'filament_motion_sensor filament_motion' %}
    {% set CHAMBER_HEAT = 'temperature_fan chamber' %}
    {% set config = printer.configfile.config %}
    {% if printer.toolhead.homed_axes %}
        RESPOND MSG="Homed Axis: "{printer.toolhead.homed_axes}
    {% else %}
        RESPOND MSG="Homed Axis: none"
    {% endif %}
    {% if "xyz" in printer.toolhead.homed_axes %}
        GET_POSITION
        RESPOND MSG="Toolhead Position: X{printer.toolhead.position.x}, Y{printer.toolhead.position.y}, Z{printer.toolhead.position.z}"
        RESPOND MSG="Gcode Position: X{printer.gcode_move.gcode_position.x}, Y{printer.gcode_move.gcode_position.y}, Z{printer.gcode_move.gcode_position.z}, E{printer.gcode_move.gcode_position.e}"
        RESPOND MSG="Stalls: "{printer.toolhead.stalls}
        RESPOND MSG="Minimum Position: X{printer.toolhead.axis_minimum.x}, Y{printer.toolhead.axis_minimum.y}, Z{printer.toolhead.axis_minimum.z}"
        RESPOND MSG="Maximum Position: X{printer.toolhead.axis_maximum.x}, Y{printer.toolhead.axis_maximum.y}, Z{printer.toolhead.axis_maximum.z}"
        RESPOND MSG="Maximum Velocity: {printer.toolhead.max_velocity}mm/s"
        RESPOND MSG="Maximum Acceleration: {printer.toolhead.max_accel}mm/s/s"
        RESPOND MSG="Maximum Accel-to-Decel: {printer.toolhead.max_accel_to_decel}mm/s/s"
        RESPOND MSG="Square Corner Velocity: {printer.toolhead.square_corner_velocity}mm/s"
        RESPOND MSG="Live Velocity: {printer.motion_report.live_velocity}mm/s"
        RESPOND MSG="Gcode Speed: {printer.gcode_move.speed}mm/s"
        RESPOND MSG="Gcode Speed Factor: {(printer.gcode_move.speed_factor * 100)}%"
        RESPOND MSG="Gcode Extrude Factor: {(printer.gcode_move.extrude_factor * 100)}%"
        RESPOND MSG="Absolute Positioning: "{printer.gcode_move.absolute_coordinates}
        RESPOND MSG="Absolute Extrusion: "{printer.gcode_move.absolute_extrude}
        GET_PROBE_LIMITS
        {% if printer.quad_gantry_level %}
            RESPOND MSG="Quad gantry Level Applied: "{printer.quad_gantry_level.applied}
        {% endif %}
        {% if printer.z_tilt %}
            RESPOND MSG="Z-Tilt Applied: "{printer.z_tilt.applied}
        {% endif %}
        {% if printer.bed_mesh %}
            {% set bed_mesh = printer.bed_mesh %}
            RESPOND MSG="Bed Mesh Profile: "{bed_mesh.profile_name}
            RESPOND MSG="Bed Mesh Min: {bed_mesh.mesh_min}"
            RESPOND MSG="Bed Mesh Max: {bed_mesh.mesh_max}"
        {% endif %}
        {% if printer[FIL_SWITCH] %}
            {% set fil_sensor = printer[FIL_SWITCH] %}
            RESPOND MSG="Filament Sensor Enabled: "{fil_sensor.enabled}
            RESPOND MSG="Filament Detected: "{fil_sensor.filament_detected}
        {% endif %}
        {% if printer[FIL_MOTION] %}
            {% set fil_sensor = printer[FIL_MOTION] %}
            RESPOND MSG="Filament Sensor Enabled: "{fil_sensor.enabled}
            RESPOND MSG="Filament Detected: "{fil_sensor.filament_detected}
        {% endif %}
        {% set extruder = printer['extruder'] %}
        {% set heater_bed = printer['heater_bed'] %}
        {% set chamber = printer[CHAMBER_HEAT] %}
        RESPOND MSG="Extruder Temperature: {extruder.temperature}C"
        RESPOND MSG="Extruder Target Temp: {extruder.target}C"
        RESPOND MSG="Extruder Power: {(extruder.power * 100)}%"
        RESPOND MSG="Extruder Can Extrude: {extruder.can_extrude}"
        RESPOND MSG="Bed Temperature: {heater_bed.temperature}C"
        RESPOND MSG="Bed Target Temp: {heater_bed.target}C"
        RESPOND MSG="Bed Power: {(heater_bed.power * 100)}%"
        {% if chamber %}
            RESPOND MSG="Chamber Temperature: {chamber.temperature}C"
            RESPOND MSG="Chamber Target Temp: {chamber.target}C"
            {% if chamber.speed %}
                RESPOND MSG="Chamber Fan: {(chamber.speed * 100)}%"
            {% elif chamber.power %}
                RESPOND MSG="Bed Power: {(heater_bed.power * 100)}%"
            {% endif %}
        {% endif %}
        #TODO Support different combinations. Currently assumes all drivers are the same.
        {% if config["tmc2130 stepper_x"] %}
            {% set driver_x = printer["tmc2130 stepper_x"] %}
            {% set driver_y = printer["tmc2130 stepper_y"] %}
            {% set driver_z = printer["tmc2130 stepper_z"] %}
            {% if config["tmc2130 stepper_z1"] %}
                {% set driver_z1 = printer["tmc2130 stepper_z1"] %}
            {% else %}
                {% set driver_z1 = 0 %}
            {% endif %}
            {% set driver_e = printer["tmc2130 extruder"] %}
        {% elif config["tmc2208 stepper_x"] %}
            {% set driver_x = printer["tmc2208 stepper_x"] %}
            {% set driver_y = printer["tmc2208 stepper_y"] %}
            {% set driver_z = printer["tmc2208 stepper_z"] %}
            {% if config["tmc2208 stepper_z1"] %}
                {% set driver_z1 = printer["tmc2208 stepper_z1"] %}
            {% else %}
                {% set driver_z1 = 0 %}
            {% endif %}
            {% set driver_e = printer["tmc2208 extruder"] %}
        {% elif config["tmc2209 stepper_x"] %}
            {% set driver_x = printer["tmc2209 stepper_x"] %}
            {% set driver_y = printer["tmc2209 stepper_y"] %}
            {% set driver_z = printer["tmc2209 stepper_z"] %}
            {% if config["tmc2209 stepper_z1"] %}
                {% set driver_z1 = printer["tmc2209 stepper_z1"] %}
            {% else %}
                {% set driver_z1 = 0 %}
            {% endif %}
            {% set driver_e = printer["tmc2209 extruder"] %}
        {% elif config["tmc2660 stepper_x"] %}
            {% set driver_x = printer["tmc2660 stepper_x"] %}
            {% set driver_y = printer["tmc2660 stepper_y"] %}
            {% set driver_z = printer["tmc2660 stepper_z"] %}
            {% if config["tmc2660 stepper_z1"] %}
                {% set driver_z1 = printer["tmc2660 stepper_z1"] %}
            {% else %}
                {% set driver_z1 = 0 %}
            {% endif %}
            {% set driver_e = printer["tmc2660 extruder"] %}
        {% elif config["tmc5160 stepper_x"] %}
            {% set driver_x = printer["tmc5160 stepper_x"] %}
            {% set driver_y = printer["tmc5160 stepper_y"] %}
            {% set driver_z = printer["tmc5160 stepper_z"] %}
            {% if config["tmc5160 stepper_z1"] %}
                {% set driver_z1 = printer["tmc5160 stepper_z1"] %}
            {% else %}
                {% set driver_z1 = 0 %}
            {% endif %}
            {% set driver_e = printer["tmc5160 extruder"] %}
        {% else %}
            {% set driver = 0 %}
        {% endif %}
        {% if driver != 0 %}
            RESPOND MSG="X Stepper Run Current: "{driver_x.run_current}
            {% if driver_x.hold_current %}
                RESPOND MSG="X Stepper Hold Current: "{driver_x.hold_current}
            {% endif %}
            RESPOND MSG="Y Stepper Run Current: "{driver_y.run_current}
            {% if driver_y.hold_current %}
                RESPOND MSG="Y Stepper Hold Current: "{driver_y.hold_current}
            {% endif %}
            {% if driver_z1 == 0 %}
                RESPOND MSG="Z Stepper Run Current: "{driver_z.run_current}
                {% if driver_z.hold_current %}
                    RESPOND MSG="Z Stepper Hold Current: "{driver_z.hold_current}
                {% endif %}
            {% else %}
                RESPOND MSG="Z0 Stepper Run Current: "{driver_z.run_current}
                {% if driver_z.hold_current %}
                    RESPOND MSG="Z0 Stepper Hold Current: "{driver_z.hold_current}
                {% endif %}
                RESPOND MSG="Z1 Stepper Run Current: "{driver_z1.run_current}
                {% if driver_z1.hold_current %}
                    RESPOND MSG="Z1 Stepper Hold Current: "{driver_z1.hold_current}
                {% endif %}
            {% endif %}
            RESPOND MSG="Extruder Run Current: "{driver_e.run_current}
            {% if driver_e.hold_current %}
                RESPOND MSG="Extruder Hold Current: "{driver_e.hold_current}
            {% endif %}
        {% endif %}

    {% else %}
        RESPOND TYPE=error MSG="All axis must be homed to retrieve position stats."
    {% endif %}

[gcode_macro GET_SYS_INFO]
gcode:
    RESPOND MSG="Load: "{printer.system_stats.sysload}
    RESPOND MSG="CPU: "{printer.system_stats.cputime}"%"
    RESPOND MSG="Free Mem: "{printer.system_stats.memavail}" B"

[gcode_macro GET_PRINT_STATS]
gcode:
    RESPOND MSG="File: "{printer.print_stats.filename}
    RESPOND MSG="File Path: "{printer.virtual_sdcard.file_path}
    RESPOND MSG="File Position: "{printer.virtual_sdcard.file_position}
    RESPOND MSG="File Size: "{printer.virtual_sdcard.file_size}
    RESPOND MSG="Total Duration: "{printer.print_stats.total_duration}
    RESPOND MSG="Print Duration: "{printer.print_stats.print_duration}
    RESPOND MSG="Filament Used: "{printer.print_stats.filament_used}
    RESPOND MSG="State: "{printer.print_stats.state}
    RESPOND MSG="State: "{printer.print_stats.message}
    RESPOND MSG="Total Layers: "{printer.print_stats.info.total_layer}
    RESPOND MSG="Current Layer: "{printer.print_stats.info.current_layer}
    RESPOND MSG="Paused: "{printer.pause_resume.is_paused}
    RESPOND MSG="Idle State: "{printer.idle_timeout.state}
    RESPOND MSG="Printing Time: "{printer.idle_timeout.printing_time}
    RESPOND MSG="Print Active: "{printer.virtual_sdcard.is_active}
    RESPOND MSG="Print Progress: "{printer.virtual_sdcard.progress}
